基础类型
除了js的基本数据类型之外。ts加了枚举类型

let bool: boolean = true;
let num: number = 1;
let str: string = 'a';

// 数组
let list: number[] = [1, 2, 3]; // 元素类型后面接上[]
let list: Array<number> = [1, 2, 3]  // 使用数组泛型

// 元组 tuple
元组类型允许表示一个已知元素类型和数量的数组，每个元素的类型不必相同
let x: [string, number] = ['hello', 1];
let y: [string, number] = [1, 'hello']; // error
当访问一个已知索引元素，会得到正确的类型
x[0].substr(1)  // 第一个位置是字符串类型，所以可以使用字符串的方法
x[1].substr(1)  // error number does not have substr 
当访问一个越界的元素，会使用联合类型替代
x[3] = 1;
x[3].toString()  // 因为字符串和数字都有toString方法，所以可使用
越界元素意思就是超出元组定义数量的元素，这个元素必须是元组定义元素的一种类型，调用方法属性，也必须是元组定义共有的

枚举enum
enum类型是对js类型的一个补充，使用枚举类型可以为一组数值赋予友好的名字
enum Color {Red, Green, Blue}
let c: Color = Color.Green;
默认情况下，从0开始为元素编号
也可以手动的给成员赋值







